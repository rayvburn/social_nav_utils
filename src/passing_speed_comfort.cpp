#include <social_nav_utils/passing_speed_comfort.h>

#include <algorithm>
#include <math.h>

namespace social_nav_utils {

PassingSpeedComfort::PassingSpeedComfort(
	double distance,
	double robot_speed,
	double distance_min,
	double speed_max,
	double distance_max,
	double speed_min,
	bool simple_method
) {
	if (simple_method) {
		std::function<double(double,double)> calc_fun = &PassingSpeedComfort::computeSpeedComfort;

		comfort_ = calc_fun(distance, robot_speed);
		comfort_normalized_ = computeSpeedComfortNormalized(
			comfort_,
			distance_min,
			speed_max,
			distance_max,
			speed_min,
			calc_fun
		);
		return;
	}

	// using the spline fitting approach
	std::function<double(double,double)> calc_fun = &PassingSpeedComfort::computeSpeedComfortSpline;

	comfort_ = calc_fun(distance, robot_speed);
	comfort_normalized_ = computeSpeedComfortSplineNormalized(
		comfort_,
		distance_min,
		speed_max,
		distance_max,
		speed_min,
		calc_fun
	);
}

double PassingSpeedComfort::computeSpeedComfort(double distance, double speed) {
	/*
	 * Authors of "The effect of robot speed on comfortable passing distances" did not established a full model
	 * representing comfort as a function of speed and distance for the passing scenario. Thus, an approximation
	 * of their results was designed.
	 *
	 * Namely, 2 exponential models for closer and further passing distances were defined based on their results (Fig. 7)
	 */
	// general fitting model lambda function
	auto model_exp2_fun = [](double a, double b, double c, double d, double x) -> double {
		// Based on Matlab's `exp2` model
		return a * std::exp(b * x) + c * std::exp(d * x);
	};
	// fitted model for close passing distances
	auto model_close_fun = [model_exp2_fun](double speed) -> double {
		// coefficients
		const double a = 6.022541906829932;
		const double b = -0.282233847093237;
		const double c = -0.963915948883583;
		const double d = -3.904914546865386;
		return model_exp2_fun(a, b, c, d, speed);
	};
	// fitted model for far passing distances
	auto model_far_fun = [model_exp2_fun](double speed) -> double {
		// coefficients
		const double a = 6.518175639643890;
		const double b = 0.098435276370722;
		const double c = -0.427768878118209;
		const double d = 1.017851222030475;
		return model_exp2_fun(a, b, c, d, speed);
	};

	// upper boundary
	const double CLOSE_DIST_THRESHOLD = 0.6;
	// lower boundary
	const double FAR_DIST_THRESHOLD = 0.8;

	// store the comfort value computed for any of the cases below
	double comfort = 0.0;
	if (distance <= CLOSE_DIST_THRESHOLD) {
		comfort = model_close_fun(speed);
	} else if (distance >= FAR_DIST_THRESHOLD) {
		comfort = model_far_fun(speed);
	} else {
		// mixture of models for distances between CLOSE_DIST_THRESHOLD and FAR_DIST_THRESHOLD
		// results is the average of both outputs
		double comfort_close = model_close_fun(speed);
		double comfort_far = model_far_fun(speed);

		double mixing_range = FAR_DIST_THRESHOLD - CLOSE_DIST_THRESHOLD;
		double dist_from_far = FAR_DIST_THRESHOLD - distance;
		double close_factor = dist_from_far / mixing_range;
		double far_factor = 1.0 - close_factor;

		comfort = close_factor * comfort_close + far_factor * comfort_far;
	}
	// trim to the lower bound
	return std::max(comfort, 0.0);
}

double PassingSpeedComfort::computeSpeedComfortNormalized(
	double dist,
	double speed,
	double dist_min,
	double speed_max,
	double dist_max,
	double speed_min,
	std::function<double(double,double)>& calc_fun
) {
	double comfort = calc_fun(dist, speed);
	return computeSpeedComfortNormalized(
		comfort,
		dist_min,
		speed_max,
		dist_max,
		speed_min,
		calc_fun
	);
}

double PassingSpeedComfort::computeSpeedComfortNormalized(
	double comfort,
	double dist_min,
	double speed_max,
	double dist_max,
	double speed_min,
	std::function<double(double,double)>& calc_fun
) {
	double comfort_min = calc_fun(dist_min, speed_max);
	double comfort_max = calc_fun(dist_max, speed_min);

	double normalized = (comfort - comfort_min) / (comfort_max - comfort_min);
	// trim to 0.0 - 1.0 bounds
	return std::max(std::min(normalized, 1.0), 0.0);
}

double PassingSpeedComfort::computeSpeedComfortSpline(double distance, double robot_speed) {
	// Multivariate spline fitted with Matlab's `csapi` function

	// The matrix below was automatically generated from a Matlab array
	static const auto COEFFS = std::vector<std::vector<std::vector<std::vector<double>>>>{
		{
			{
				{-152.438476204374865, 327.783216435155794, -219.761850138497266, 3.042136153851121},
				{-152.438476204375320, 190.588587851218449, -64.250308852584993, -37.501768266052160},
				{2.942183284812513, -15.203355024688197, 14.673045919353616, -41.711174353967344},
				{2.942183284812059, -11.231407590191463, 2.777402742657764, -37.918876630929105}},
			{
				{134.858242018160041, -315.942635399631570, 241.314299135001903, -7.160144760688236},
				{134.858242018160581, -194.570217583287672, 88.160443240126199, 40.440480328335831},
				{16.023854347374410, -12.511590858770921, -5.026370558800177, 53.001168029681722},
				{16.023854347374858, 9.120612510184646, -6.552310815663999, 49.665877856725089}},
			{
				{-24.791020942239889, 68.176234500608615, -64.770243339545175, 11.874251174359870},
				{-24.791020942240035, 45.864315652592772, -30.558078293584785, -2.090318287889388},
				{-9.850925320753444, 12.396437380568722, -4.340739428662105, -8.813011383714123},
				{-9.850925320753550, -0.902311802448447, 0.831617081492019, -9.153731126900572}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000}}},
		{
			{
				{-152.438476204374837, 327.783216435155794, -219.761850138497266, 3.042136153851082},
				{-152.438476204375320, 190.588587851218534, -64.250308852584993, -37.501768266052224},
				{2.942183284812434, -15.203355024688236, 14.673045919353628, -41.711174353967415},
				{2.942183284812019, -11.231407590191463, 2.777402742657772, -37.918876630929077}},
			{
				{-2.336386565777339, -20.937740607991415, 43.528634010354445, -4.422222222222215},
				{-2.336386565777218, -23.040488517191086, 30.335165272799692, 6.688888888888904},
				{18.671819303705668, -26.194610380990291, 8.179370768618076, 15.461111111111132},
				{18.671819303705732, -0.987654320987669, -4.052648347272010, 15.538888888888879}},
			{
				{14.965535693474923, -32.887878301678271, 20.682636604061717, 8.399541079486733},
				{14.965535693474967, -19.418896177550849, 4.990604260292989, 12.048492477278028},
				{0.557776774570580, 0.784577008640357, -3.394839365716735, 11.725672358523729},
				{0.557776774570622, 1.537575654310646, -2.349870667388784, 10.407698896783620}},
			{
				{0.584096641444316, 0.868180007964949, -3.646356033452807, 3.000000000000000},
				{0.584096641444307, 1.393866985264840, -2.967741935483872, 2.000000000000000},
				{-1.433691756272398, 2.182397451214652, -1.358422939068100, 1.000000000000000},
				{-1.433691756272402, 0.246913580246915, -0.265232974910395, 0.700000000000000}}},
		{
			{
				{566.800040430287595, -1066.888188590770596, 550.880844794862583, -30.768114273548512},
				{566.800040430288504, -556.768152203511704, 63.783942556577934, 53.779803283358660},
				{-109.833878609827735, 208.411902377377913, -92.976369865182278, 21.386680296817655},
				{-109.833878609826485, 60.136166254110769, 27.870261018987534, 11.742111900584131}},
			{
				{-139.531015149714648, 274.067154183648597, -154.257031114293028, -1.684299683756278},
				{-139.531015149714932, 148.489240548905542, -27.490112694526808, -27.062702550558090},
				{21.319784260036833, -39.877629903209673, 21.385112096036327, -22.078945807459576},
				{21.319784260036514, -11.095921152159978, -1.552985878879993, -18.588100078947328}},
			{
				{-27.594684821172681, 43.050945771018938, -12.535882527119872, 6.567584507693195},
				{-27.594684821172692, 18.215729431963496, 5.844120033774856, 5.936348378777272},
				{12.555257843693335, -19.037095076619643, 5.474505493679589, 9.740321949619206},
				{12.555257843693305, -2.087496987633649, -4.031560935234392, 9.492935539766098}},
			{
				{0.747643701048712, -2.032433293508553, 0.542442054958182, 5.204000000000000},
				{0.747643701048714, -1.359553962564713, -0.475154121863798, 5.204000000000000},
				{0.493543962122221, -0.350234966148949, -1.244559139784946, 4.783000000000000},
				{0.493543962122224, 0.316049382716049, -1.259942652329751, 4.197000000000000}}},
		{
			{
				{-458.403312303039115, 877.060918441144167, -453.380507813462373, 45.683568205305392},
				{-458.403312303039854, 464.497937368408770, -50.912851070596467, -23.771990911212406},
				{49.927920199643033, -154.346534240695092, 88.655280336874696, 5.606056590507449},
				{49.927920199641633, -86.943841971177406, -19.925388958467792, 18.795441286552780}},
			{
				{200.549009108458051, -366.065758970813931, 176.271475762624590, -20.145168247885383},
				{200.549009108458279, -185.571650773201611, 10.780252839419953, 5.205179419457115},
				{-44.580542905859808, 85.169511523217153, -34.400709823073058, -9.246937629368963},
				{-44.580542905859353, 24.985778600306499, 15.169170732512546, -11.542832938596845}},
			{
				{-15.391086029424001, 24.651224813585859, -8.132993597453552, 2.201690921364861},
				{-15.391086029424009, 10.799247387104273, 2.502148062753486, 1.564843752557076},
				{7.903106114528734, -9.978718752618148, 2.871385948272243, 3.475145262253495},
				{7.903106114528725, 0.690474501995655, -1.308323964507883, 3.466748936257261}},
			{
				{-5.818133545732111, 9.005336519315016, -3.727968936678614, 6.204000000000000},
				{-5.818133545732113, 3.769016328156114, 0.104336917562725, 5.739000000000000},
				{2.978715872383740, -4.085463958582242, -0.038064516129033, 6.019000000000000},
				{2.978715872383734, -0.064197530864194, -1.905412186379929, 5.446000000000000}}},
		{
			{
				{153.511735265341116, -331.648197240709010, 197.426132695544339, -14.466158547672975},
				{153.511735265341287, -193.487635501901906, 39.885382872761099, 19.058160361490735},
				{33.468363570805622, 13.753207106308857, -40.995109905255724, 11.814093341152336},
				{33.468363570806467, 58.935497926896716, -8.285192640313293, -0.798877046795521}},
			{
				{-74.492978273365409, 160.170792093872535, -95.756828925452723, 7.264972675297841},
				{-74.492978273365509, 93.127111647843577, -19.767457802937908, -9.058015127270322},
				{-14.623790786074023, -7.438409021199883, 18.792458379051745, -5.883303675064495},
				{-14.623790786074395, -27.180526582399935, 3.213937357431869, -0.265568166665186}},
			{
				{9.820120137594520, -16.527768561802411, 7.969935769980815, -0.374348193152646},
				{9.820120137594538, -7.689660437967333, 0.704707070049894, 0.794276610994434},
				{-3.937760623858024, 5.567501747785301, -0.250264340532019, 0.449097001366805},
				{-3.937760623858018, 0.251524905576969, 2.368297653481001, 1.105068715204857}},
			{
				{-4.541616885702903, 6.309438470728786, -1.930752688172039, 6.204000000000000},
				{-4.541616885702902, 2.221983273596174, 0.628673835125448, 6.070000000000000},
				{3.175538740652239, -3.909199522102746, -0.130573476702509, 6.389000000000000},
				{3.175538740652239, 0.377777777777778, -1.719713261648746, 5.828000000000000}}},
		{
			{
				{-11.131351148462214, 23.226285645834114, -12.942005687073570, 0.691134549060969},
				{-11.131351148462212, 13.208069612218116, -2.011699109657902, -1.401647929944511},
				{-1.848728033736970, -1.819254438205872, 3.113267718647609, -0.646622806220018},
				{-1.848728033737031, -4.315037283750797, 0.352836443767116, 0.217483301360436}},
			{
				{17.614062885839232, -38.818126250552837, 22.698850691873851, -1.414722453305942},
				{17.614062885839232, -22.965469653297518, 4.163771920718744, 2.376881089624117},
				{5.457227356409341, 0.813515242585450, -5.804607564101686, 1.205152329626906},
				{5.457227356409453, 8.180772173738093, -1.757178226756107, -0.744894394742499}},
			{
				{-1.555662939910713, 7.742764606861521, -6.641659876734956, 0.795701851245733},
				{-1.555662939910715, 6.342667960941877, -2.416030106393938, -0.541950196534806},
				{-5.771073309790959, 4.242522992062412, 2.347305822457991, -0.486533267720713},
				{-5.771073309791001, -3.548425976155400, 2.659649479616153, 0.902976202923320}},
			{
				{-4.329218106995887, 6.757530864197532, -2.587629629629630, 6.304000000000000},
				{-4.329218106995885, 2.861234567901235, 0.298000000000000, 6.019000000000000},
				{2.070781893004118, -2.983209876543211, 0.243111111111111, 6.338000000000000},
				{2.070781893004111, -0.187654320987652, -1.183777777777777, 6.032000000000000}}},
		{
			{
				{3.846536398085467, -7.153190345427515, 3.534112646020772, -0.103124724593672},
				{3.846536398085467, -3.691307587150597, 0.280763266247338, 0.417178420872391},
				{-0.431212711129618, 1.501516550264784, -0.704642700351277, 0.146547733561235},
				{-0.431212711129603, 0.919379390239804, 0.384760472875786, 0.094221361530093}},
			{
				{-9.101179870470078, 16.924959299449032, -8.361962957102719, 0.244000464440385},
				{-9.101179870470078, 8.733897416025965, -0.664305942460220, -0.987073942242710},
				{1.020280075440613, -3.552695409108642, 1.667234960652575, -0.346742405301137},
				{1.020280075440579, -2.175317307263822, -0.910370761715030, -0.222934471477452}},
			{
				{5.254643472384611, -9.771768954021516, 4.827850311081948, -0.140875739846713},
				{5.254643472384611, -5.042589828875369, 0.383542676212882, 0.569895521370319},
				{-0.589067364310996, 2.051178858843857, -0.962592260301298, 0.200194671739902},
				{-0.589067364310976, 1.255937917024018, 0.525610288839244, 0.128713109947359}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}},
		{
			{
				{-1.030322249487178, 1.916033128239512, -0.946637315898421, 0.027622694087591},
				{-1.030322249487178, 0.988743103701053, -0.075204446316251, -0.111744219876533},
				{0.115503404766862, -0.402191933106639, 0.188743580451235, -0.039253857203902},
				{0.115503404766858, -0.246262336671376, -0.103060840948871, -0.025237864695561}},
			{
				{2.438429323786322, -4.534611736833513, 2.240374980959596, -0.065373709340631},
				{2.438429323786322, -2.340025345425825, 0.177983856281795, 0.264461320374462},
				{-0.273358057948240, 0.951854241685711, -0.446693140401256, 0.092900795382569},
				{-0.273358057948230, 0.582820863455590, 0.243910656912329, 0.059729613112827}},
			{
				{-1.408107074299144, 2.618578608594000, -1.293737665061175, 0.037751015253041},
				{-1.408107074299144, 1.351282241724772, -0.102779409965543, -0.152717100497929},
				{0.157854653181378, -0.549662308579073, 0.257949559950021, -0.053646938178667},
				{0.157854653181373, -0.336558526784214, -0.140849815963457, -0.034491748417266}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}},
		{
			{
				{0.274752599863248, -0.510942167530537, 0.252436617572912, -0.007366051756691},
				{0.274752599863248, -0.263664827653614, 0.020054519017667, 0.029798458633742},
				{-0.030800907937830, 0.107251182161770, -0.050331621453663, 0.010467695254374},
				{-0.030800907937829, 0.065669956445700, 0.027482890919699, 0.006730097252150}},
			{
				{-0.652537424675213, 1.213487647885025, -0.599536966735666, 0.017494372922141},
				{-0.652537424675213, 0.626203965677333, -0.047629482666959, -0.070771339255138},
				{0.073152156352346, -0.254721557634204, 0.119537600952449, -0.024860776229138},
				{0.073152156352343, -0.155966146558538, -0.065271865934285, -0.015983980973855}},
			{
				{0.377784824811965, -0.702545480354488, 0.347100349162754, -0.010128321165450},
				{0.377784824811965, -0.362539138023719, 0.027574963649292, 0.040972880621396},
				{-0.042351248414516, 0.147470375472434, -0.069205979498786, 0.014393080974764},
				{-0.042351248414515, 0.090296190112838, 0.037788975014586, 0.009253883721706}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}},
		{
			{
				{-0.068688149965812, 0.127735541882634, -0.063109154393228, 0.001841512939173},
				{-0.068688149965812, 0.065916206913403, -0.005013629754417, -0.007449614658436},
				{0.007700226984457, -0.026812795540443, 0.012582905363416, -0.002616923813593},
				{0.007700226984457, -0.016417489111425, -0.006870722729925, -0.001682524313037}},
			{
				{0.171720374914530, -0.319338854706585, 0.157772885983070, -0.004603782347932},
				{0.171720374914530, -0.164790517283509, 0.012534074386042, 0.018624036646089},
				{-0.019250567461144, 0.067031988851106, -0.031457263408539, 0.006542309533984},
				{-0.019250567461143, 0.041043722778563, 0.017176806824812, 0.004206310782593}},
			{
				{-0.103032224948718, 0.191603312823951, -0.094663731589842, 0.002762269408759},
				{-0.103032224948718, 0.098874310370105, -0.007520444631625, -0.011174421987653},
				{0.011550340476686, -0.040219193310664, 0.018874358045123, -0.003925385720390},
				{0.011550340476686, -0.024626233667138, -0.010306084094887, -0.002523786469556}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}},
		{
			{
				{0.007632016662868, -0.014192837986959, 0.007012128265914, -0.000204612548797},
				{0.007632016662868, -0.007324022990378, 0.000557069972713, 0.000827734962048},
				{-0.000855580776051, 0.002979199504494, -0.001398100595935, 0.000290769312621},
				{-0.000855580776051, 0.001824165456825, 0.000763413636658, 0.000186947145893}},
			{
				{-0.034344074982906, 0.063867770941317, -0.031554577196614, 0.000920756469586},
				{-0.034344074982906, 0.032958103456702, -0.002506814877208, -0.003724807329218},
				{0.003850113492229, -0.013406397770221, 0.006291452681708, -0.001308461906797},
				{0.003850113492229, -0.008208744555713, -0.003435361364962, -0.000841262156519}},
			{
				{0.034344074982906, -0.063867770941317, 0.031554577196614, -0.000920756469586},
				{0.034344074982906, -0.032958103456702, 0.002506814877208, 0.003724807329218},
				{-0.003850113492229, 0.013406397770221, -0.006291452681708, 0.001308461906797},
				{-0.003850113492229, 0.008208744555713, 0.003435361364962, 0.000841262156519}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}},
		{
			{
				{0.007632016662868, -0.014192837986959, 0.007012128265914, -0.000204612548797},
				{0.007632016662868, -0.007324022990378, 0.000557069972713, 0.000827734962048},
				{-0.000855580776051, 0.002979199504494, -0.001398100595935, 0.000290769312621},
				{-0.000855580776051, 0.001824165456825, 0.000763413636658, 0.000186947145893}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, -0.000000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000},
				{-0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 0.000000000000000}},
			{
				{-0.017172037491453, 0.031933885470659, -0.015777288598307, 0.000460378234793},
				{-0.017172037491453, 0.016479051728351, -0.001253407438604, -0.001862403664609},
				{0.001925056746114, -0.006703198885111, 0.003145726340854, -0.000654230953398},
				{0.001925056746114, -0.004104372277856, -0.001717680682481, -0.000420631078259}},
			{
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000},
				{0.000000000000000, 0.000000000000000, 0.000000000000000, 6.389000000000000}}}
	};
	// Note that COEFFS dimensions are derived from the sizes of: BREAKS_X, BREAKS_Y and values of ORDER_X, ORDER_Y
	static const std::vector<double> BREAKS_X = {
		0.0000, 0.3000, 0.6000, 0.8000, 1.0000, 1.2000, 2.0000, 3.0000, 4.0000, 5.0000, 6.0000, 7.5000, 9.0000
	};
	static const std::vector<double> BREAKS_Y = {
		0.0500, 0.3500, 0.8000, 1.2500, 1.7000
	};
	static const int ORDER_X = 4;
	static const int ORDER_Y = 4;

	return computeSplineBivariate(
		distance,
		robot_speed,
		COEFFS,
		BREAKS_X,
		BREAKS_Y,
		ORDER_X,
		ORDER_Y
	);
}

double PassingSpeedComfort::computeSpeedComfortSplineNormalized(
	double dist,
	double speed,
	double dist_min,
	double speed_max,
	double dist_max,
	double speed_min,
	std::function<double(double,double)>& spline_fun
) {
	double current_comfort = spline_fun(dist, speed);
	return computeSpeedComfortSplineNormalized(
		current_comfort,
		dist_min,
		speed_max,
		dist_max,
		speed_min,
		spline_fun
	);
}

double PassingSpeedComfort::computeSpeedComfortSplineNormalized(
	double comfort,
	double dist_min,
	double speed_max,
	double dist_max,
	double speed_min,
	std::function<double(double,double)>& spline_fun
) {
	double minimum_comfort = spline_fun(dist_min, speed_max);
	// a case where the robot does not affect the human
	double maximum_comfort = spline_fun(dist_max, speed_min);
	return computeSpeedComfortSplineNormalized(
		comfort,
		minimum_comfort,
		maximum_comfort
	);
}

double PassingSpeedComfort::computeSpeedComfortSplineNormalized(
	double comfort,
	double comfort_min,
	double comfort_max
) {
	double normalized = (comfort - comfort_min) / (comfort_max - comfort_min);
	// trim to 0.0 - 1.0 bounds
	return std::max(std::min(normalized, 1.0), 0.0);
}

double PassingSpeedComfort::computeSplineBivariate(
	double x,
	double y,
	const std::vector<std::vector<std::vector<std::vector<double>>>>& coefficients,
	const std::vector<double>& breaks_x,
	const std::vector<double>& breaks_y,
	int order_x,
	int order_y
) {
	// Determine the proper indices
	int ix = std::distance(breaks_x.begin(), std::upper_bound(breaks_x.begin(), breaks_x.end(), x)) - 1;
	int iy = std::distance(breaks_y.begin(), std::upper_bound(breaks_y.begin(), breaks_y.end(), y)) - 1;

	// Ensure valid indices
	if (ix < 0) {
		ix = 0;
	} else if (ix >= static_cast<int>(breaks_x.size()) - 1) {
		ix = static_cast<int>(breaks_x.size()) - 2;
	}

	if (iy < 0) {
		iy = 0;
	} else if (iy >= static_cast<int>(breaks_y.size()) - 1) {
		iy = static_cast<int>(breaks_y.size()) - 2;
	}

	// Evaluate the spline
	double result = 0.0;
	for (int r1 = 0; r1 < order_x; r1++) {
		for (int r2 = 0; r2 < order_y; r2++) {
			result += coefficients[ix][r1][iy][r2] *
					std::pow(x - breaks_x[ix], order_x - r1 - 1) *
					std::pow(y - breaks_y[iy], order_y - r2 - 1);
		}
	}

	return result;
}

} // namespace social_nav_utils
